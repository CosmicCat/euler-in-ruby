# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

def divisors_count(x)
  divisors = 1
  for i in 2..Math.sqrt(x)
    if x % i == 0
      # i am assuming that for every divisor < sqrt(x) there is exactly one divisor > sqrt(x)
      # that pairs with the divisor. And of course one single square root divisor when
      # it is a natural number. I am sure Euclid or some other hoser proved this
      divisors += (Math.sqrt(x) == i) ? 1 : 2
    end
  end
  return divisors
end

i = 2
triangle = 1
while true
  triangle = triangle + i
  if (foo = divisors_count(triangle)) > 500
    puts "found: #{triangle}"
    abort
  end
  i += 1
end


